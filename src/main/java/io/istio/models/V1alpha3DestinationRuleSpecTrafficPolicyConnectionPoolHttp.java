/*
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.21.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.istio.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * HTTP connection pool settings.
 */
@ApiModel(description = "HTTP connection pool settings.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-12-20T14:22:47.686Z[Etc/UTC]")
public class V1alpha3DestinationRuleSpecTrafficPolicyConnectionPoolHttp {
  /**
   * Specify if http1.1 connection should be upgraded to http2 for the associated destination.
   */
  @JsonAdapter(H2UpgradePolicyEnum.Adapter.class)
  public enum H2UpgradePolicyEnum {
    DEFAULT("DEFAULT"),
    
    DO_NOT_UPGRADE("DO_NOT_UPGRADE"),
    
    UPGRADE("UPGRADE");

    private String value;

    H2UpgradePolicyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static H2UpgradePolicyEnum fromValue(String value) {
      for (H2UpgradePolicyEnum b : H2UpgradePolicyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<H2UpgradePolicyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final H2UpgradePolicyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public H2UpgradePolicyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return H2UpgradePolicyEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_H2_UPGRADE_POLICY = "h2UpgradePolicy";
  @SerializedName(SERIALIZED_NAME_H2_UPGRADE_POLICY)
  private H2UpgradePolicyEnum h2UpgradePolicy;

  public static final String SERIALIZED_NAME_HTTP1_MAX_PENDING_REQUESTS = "http1MaxPendingRequests";
  @SerializedName(SERIALIZED_NAME_HTTP1_MAX_PENDING_REQUESTS)
  private Integer http1MaxPendingRequests;

  public static final String SERIALIZED_NAME_HTTP2_MAX_REQUESTS = "http2MaxRequests";
  @SerializedName(SERIALIZED_NAME_HTTP2_MAX_REQUESTS)
  private Integer http2MaxRequests;

  public static final String SERIALIZED_NAME_IDLE_TIMEOUT = "idleTimeout";
  @SerializedName(SERIALIZED_NAME_IDLE_TIMEOUT)
  private String idleTimeout;

  public static final String SERIALIZED_NAME_MAX_REQUESTS_PER_CONNECTION = "maxRequestsPerConnection";
  @SerializedName(SERIALIZED_NAME_MAX_REQUESTS_PER_CONNECTION)
  private Integer maxRequestsPerConnection;

  public static final String SERIALIZED_NAME_MAX_RETRIES = "maxRetries";
  @SerializedName(SERIALIZED_NAME_MAX_RETRIES)
  private Integer maxRetries;

  public static final String SERIALIZED_NAME_USE_CLIENT_PROTOCOL = "useClientProtocol";
  @SerializedName(SERIALIZED_NAME_USE_CLIENT_PROTOCOL)
  private Boolean useClientProtocol;


  public V1alpha3DestinationRuleSpecTrafficPolicyConnectionPoolHttp h2UpgradePolicy(H2UpgradePolicyEnum h2UpgradePolicy) {
    
    this.h2UpgradePolicy = h2UpgradePolicy;
    return this;
  }

   /**
   * Specify if http1.1 connection should be upgraded to http2 for the associated destination.
   * @return h2UpgradePolicy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specify if http1.1 connection should be upgraded to http2 for the associated destination.")

  public H2UpgradePolicyEnum getH2UpgradePolicy() {
    return h2UpgradePolicy;
  }


  public void setH2UpgradePolicy(H2UpgradePolicyEnum h2UpgradePolicy) {
    this.h2UpgradePolicy = h2UpgradePolicy;
  }


  public V1alpha3DestinationRuleSpecTrafficPolicyConnectionPoolHttp http1MaxPendingRequests(Integer http1MaxPendingRequests) {
    
    this.http1MaxPendingRequests = http1MaxPendingRequests;
    return this;
  }

   /**
   * Get http1MaxPendingRequests
   * @return http1MaxPendingRequests
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getHttp1MaxPendingRequests() {
    return http1MaxPendingRequests;
  }


  public void setHttp1MaxPendingRequests(Integer http1MaxPendingRequests) {
    this.http1MaxPendingRequests = http1MaxPendingRequests;
  }


  public V1alpha3DestinationRuleSpecTrafficPolicyConnectionPoolHttp http2MaxRequests(Integer http2MaxRequests) {
    
    this.http2MaxRequests = http2MaxRequests;
    return this;
  }

   /**
   * Maximum number of active requests to a destination.
   * @return http2MaxRequests
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Maximum number of active requests to a destination.")

  public Integer getHttp2MaxRequests() {
    return http2MaxRequests;
  }


  public void setHttp2MaxRequests(Integer http2MaxRequests) {
    this.http2MaxRequests = http2MaxRequests;
  }


  public V1alpha3DestinationRuleSpecTrafficPolicyConnectionPoolHttp idleTimeout(String idleTimeout) {
    
    this.idleTimeout = idleTimeout;
    return this;
  }

   /**
   * The idle timeout for upstream connection pool connections.
   * @return idleTimeout
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The idle timeout for upstream connection pool connections.")

  public String getIdleTimeout() {
    return idleTimeout;
  }


  public void setIdleTimeout(String idleTimeout) {
    this.idleTimeout = idleTimeout;
  }


  public V1alpha3DestinationRuleSpecTrafficPolicyConnectionPoolHttp maxRequestsPerConnection(Integer maxRequestsPerConnection) {
    
    this.maxRequestsPerConnection = maxRequestsPerConnection;
    return this;
  }

   /**
   * Maximum number of requests per connection to a backend.
   * @return maxRequestsPerConnection
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Maximum number of requests per connection to a backend.")

  public Integer getMaxRequestsPerConnection() {
    return maxRequestsPerConnection;
  }


  public void setMaxRequestsPerConnection(Integer maxRequestsPerConnection) {
    this.maxRequestsPerConnection = maxRequestsPerConnection;
  }


  public V1alpha3DestinationRuleSpecTrafficPolicyConnectionPoolHttp maxRetries(Integer maxRetries) {
    
    this.maxRetries = maxRetries;
    return this;
  }

   /**
   * Get maxRetries
   * @return maxRetries
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getMaxRetries() {
    return maxRetries;
  }


  public void setMaxRetries(Integer maxRetries) {
    this.maxRetries = maxRetries;
  }


  public V1alpha3DestinationRuleSpecTrafficPolicyConnectionPoolHttp useClientProtocol(Boolean useClientProtocol) {
    
    this.useClientProtocol = useClientProtocol;
    return this;
  }

   /**
   * If set to true, client protocol will be preserved while initiating connection to backend.
   * @return useClientProtocol
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If set to true, client protocol will be preserved while initiating connection to backend.")

  public Boolean getUseClientProtocol() {
    return useClientProtocol;
  }


  public void setUseClientProtocol(Boolean useClientProtocol) {
    this.useClientProtocol = useClientProtocol;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1alpha3DestinationRuleSpecTrafficPolicyConnectionPoolHttp v1alpha3DestinationRuleSpecTrafficPolicyConnectionPoolHttp = (V1alpha3DestinationRuleSpecTrafficPolicyConnectionPoolHttp) o;
    return Objects.equals(this.h2UpgradePolicy, v1alpha3DestinationRuleSpecTrafficPolicyConnectionPoolHttp.h2UpgradePolicy) &&
        Objects.equals(this.http1MaxPendingRequests, v1alpha3DestinationRuleSpecTrafficPolicyConnectionPoolHttp.http1MaxPendingRequests) &&
        Objects.equals(this.http2MaxRequests, v1alpha3DestinationRuleSpecTrafficPolicyConnectionPoolHttp.http2MaxRequests) &&
        Objects.equals(this.idleTimeout, v1alpha3DestinationRuleSpecTrafficPolicyConnectionPoolHttp.idleTimeout) &&
        Objects.equals(this.maxRequestsPerConnection, v1alpha3DestinationRuleSpecTrafficPolicyConnectionPoolHttp.maxRequestsPerConnection) &&
        Objects.equals(this.maxRetries, v1alpha3DestinationRuleSpecTrafficPolicyConnectionPoolHttp.maxRetries) &&
        Objects.equals(this.useClientProtocol, v1alpha3DestinationRuleSpecTrafficPolicyConnectionPoolHttp.useClientProtocol);
  }

  @Override
  public int hashCode() {
    return Objects.hash(h2UpgradePolicy, http1MaxPendingRequests, http2MaxRequests, idleTimeout, maxRequestsPerConnection, maxRetries, useClientProtocol);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1alpha3DestinationRuleSpecTrafficPolicyConnectionPoolHttp {\n");
    sb.append("    h2UpgradePolicy: ").append(toIndentedString(h2UpgradePolicy)).append("\n");
    sb.append("    http1MaxPendingRequests: ").append(toIndentedString(http1MaxPendingRequests)).append("\n");
    sb.append("    http2MaxRequests: ").append(toIndentedString(http2MaxRequests)).append("\n");
    sb.append("    idleTimeout: ").append(toIndentedString(idleTimeout)).append("\n");
    sb.append("    maxRequestsPerConnection: ").append(toIndentedString(maxRequestsPerConnection)).append("\n");
    sb.append("    maxRetries: ").append(toIndentedString(maxRetries)).append("\n");
    sb.append("    useClientProtocol: ").append(toIndentedString(useClientProtocol)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

