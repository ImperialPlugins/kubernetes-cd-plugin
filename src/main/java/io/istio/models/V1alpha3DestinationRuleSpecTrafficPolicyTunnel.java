/*
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.21.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.istio.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * V1alpha3DestinationRuleSpecTrafficPolicyTunnel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-12-20T14:22:47.686Z[Etc/UTC]")
public class V1alpha3DestinationRuleSpecTrafficPolicyTunnel {
  public static final String SERIALIZED_NAME_PROTOCOL = "protocol";
  @SerializedName(SERIALIZED_NAME_PROTOCOL)
  private String protocol;

  public static final String SERIALIZED_NAME_TARGET_HOST = "targetHost";
  @SerializedName(SERIALIZED_NAME_TARGET_HOST)
  private String targetHost;

  public static final String SERIALIZED_NAME_TARGET_PORT = "targetPort";
  @SerializedName(SERIALIZED_NAME_TARGET_PORT)
  private Integer targetPort;


  public V1alpha3DestinationRuleSpecTrafficPolicyTunnel protocol(String protocol) {
    
    this.protocol = protocol;
    return this;
  }

   /**
   * Specifies which protocol to use for tunneling the downstream connection.
   * @return protocol
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies which protocol to use for tunneling the downstream connection.")

  public String getProtocol() {
    return protocol;
  }


  public void setProtocol(String protocol) {
    this.protocol = protocol;
  }


  public V1alpha3DestinationRuleSpecTrafficPolicyTunnel targetHost(String targetHost) {
    
    this.targetHost = targetHost;
    return this;
  }

   /**
   * Specifies a host to which the downstream connection is tunneled.
   * @return targetHost
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies a host to which the downstream connection is tunneled.")

  public String getTargetHost() {
    return targetHost;
  }


  public void setTargetHost(String targetHost) {
    this.targetHost = targetHost;
  }


  public V1alpha3DestinationRuleSpecTrafficPolicyTunnel targetPort(Integer targetPort) {
    
    this.targetPort = targetPort;
    return this;
  }

   /**
   * Specifies a port to which the downstream connection is tunneled.
   * @return targetPort
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies a port to which the downstream connection is tunneled.")

  public Integer getTargetPort() {
    return targetPort;
  }


  public void setTargetPort(Integer targetPort) {
    this.targetPort = targetPort;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1alpha3DestinationRuleSpecTrafficPolicyTunnel v1alpha3DestinationRuleSpecTrafficPolicyTunnel = (V1alpha3DestinationRuleSpecTrafficPolicyTunnel) o;
    return Objects.equals(this.protocol, v1alpha3DestinationRuleSpecTrafficPolicyTunnel.protocol) &&
        Objects.equals(this.targetHost, v1alpha3DestinationRuleSpecTrafficPolicyTunnel.targetHost) &&
        Objects.equals(this.targetPort, v1alpha3DestinationRuleSpecTrafficPolicyTunnel.targetPort);
  }

  @Override
  public int hashCode() {
    return Objects.hash(protocol, targetHost, targetPort);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1alpha3DestinationRuleSpecTrafficPolicyTunnel {\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("    targetHost: ").append(toIndentedString(targetHost)).append("\n");
    sb.append("    targetPort: ").append(toIndentedString(targetPort)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

